class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer,Integer>mp=new HashMap<>();
        for(int num:nums)
        {
            mp.put(num,mp.getOrDefault(num,0)+1);
        }
        for(Map.Entry<Integer,Integer>entry:mp.entrySet())
        {
            if(entry.getValue()>nums.length/2)
            {
                return entry.getKey();
            }
        }
        return -1;
    }
}

time=O(n)
space=O(n)

class Solution {
    public int majorityElement(int[] nums) {
        int count=0,element=0;
        for(int i=0;i<nums.length;i++)
        {
            if(count==0)
            {
                count=1;
                element=nums[i];
            }
            else if(nums[i]==element)
            {
                count++;
            }
            else
            {
                count--;
            }
        } 
        int res=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==element)
            {
                res++;
            }
        }
        if(res>nums.length/2)
        {
            return element;
        }
        return -1;
    }
}

time=O(2n)
space=O(1)
