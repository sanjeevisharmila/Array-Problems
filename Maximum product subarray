class Solution {
    public int maxProduct(int[] nums) {
        int maxi = Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            int pro=1;
            for(int j=i;j<nums.length;j++)
            {
                pro*=nums[j];
                maxi=Math.max(pro,maxi);
            }
        }
        return maxi;
    }
}

time=O(n*n)
space=O(1)

class Solution {
    public int maxProduct(int[] nums) {
       int prefix=1,suffix=1;
       int maxi=Integer.MIN_VALUE;
       for(int i=0;i<nums.length;i++)
       {
          if(prefix<0)
          prefix=1;
          if(suffix<0)
          suffix=1;
          prefix*=nums[i];
          suffix*=nums[nums.length-i-1];
          maxi=Math.max(maxi,Math.max(prefix,suffix));
       }
       return maxi;
    }
}
time=O(n)
space=O(1)

class Solution {
    public int maxProduct(int[] nums) {
        int maxProd = nums[0];
        int currMax = nums[0];
        int currMin = nums[0];

        for (int i = 1; i < nums.length; i++) {
            int temp = currMax;

            currMax = Math.max(nums[i], Math.max(currMax * nums[i], currMin * nums[i]));
            currMin = Math.min(nums[i], Math.min(temp * nums[i], currMin * nums[i]));

            maxProd = Math.max(maxProd, currMax);
        }

        return maxProd;
    }
}
time=O(n)
space=O(1)
