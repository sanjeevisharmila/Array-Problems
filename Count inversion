
class Solution {
    static int inversionCount(int arr[]) {
        int count=0;
        for(int i=0;i<arr.length-1;i++)
        {
            for(int j=i+1;j<arr.length;j++)
            {
                if(arr[i]>arr[j])
                {
                    count++;
                }
            }
        }
        return count;
    }
}
time=O(n*n)
space=O(1)


class Solution {
    // Function to count inversions in the array.
    static int inversionCount(int arr[]) {
       int left=0;
       int right=arr.length-1;
       return mergesort(arr,left,right);
    }
    public static int mergesort(int[] arr,int left,int right)
    {
        int c=0;
        if(left<right)
        {
            int mid=(left+right)/2;
            c+=mergesort(arr,left,mid);
            c+=mergesort(arr,mid+1,right);
            c+=merge(arr,left,mid,right);
        }
        return c;
    }
    public static int merge(int[] arr,int left,int mid,int right)
    {
         int[] leftArr = Arrays.copyOfRange(arr, left, mid + 1);
        int[] rightArr = Arrays.copyOfRange(arr, mid + 1, right + 1);

        int i=0,j=0,k=left,count=0;
        while(i<leftArr.length && j<rightArr.length)
        {
            if(leftArr[i]<=rightArr[j])
            {
                arr[k++]=leftArr[i++];
            }
            else
            {
                arr[k++]=rightArr[j++];
                count+=leftArr.length-i;
            }
        }
        while(i<leftArr.length)
        {
            arr[k++]=leftArr[i++];
        }
        while(j<rightArr.length)
        {
            arr[k++]=rightArr[j++];
        }
        return count;
    }
}

time=O(n logn)
space=O(n)
