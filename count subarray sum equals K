class Solution {
    public int subarraySum(int[] nums, int k) {
      int count=0;
      for(int i=0;i<nums.length;i++)
      {
        int sum=0;
        for(int j=i;j<nums.length;j++)
        {
            sum+=nums[j];
            if(sum==k)
            {
                count++;
            }
        }
      }
      return count;
    }
}

time=O(n*n)
space=O(1)

class Solution {
    public int subarraySum(int[] nums, int k) {
       Map<Integer,Integer>mp=new HashMap<>();
       int sum=0,count=0;
       mp.put(0,1);
       for(int num:nums)
       {
          sum+=num;
          if(mp.containsKey(sum-k))
          {
            count+=mp.get(sum-k);
          }
          mp.put(sum,mp.getOrDefault(sum,0)+1);
       }
       return count;
    }
}

time=O(n)
space=O(n)
