class Solution {
    public int missingNumber(int[] nums) {
        for(int i=0;i<=nums.length;i++)
        { 
            int flag=0;
            for(int j=0;j<nums.length;j++)
            {
                if(nums[j]==i)
                {
                    flag=1;
                    break;
                }
            }
            if(flag==0){
            return i;
            }
        }
        return -1;
    }
}

time=O(n*n)
space=O(1)

class Solution {
    public int missingNumber(int[] nums) {
        int n=nums.length;
        int[] ans=new int[n+1];
        Arrays.fill(ans,-1);
        for(int i=0;i<n;i++)
        {
            ans[nums[i]]=nums[i];
        }
        for(int i=0;i<ans.length;i++)
        {
            if(ans[i]==-1)
            {
                return i;
            }
        }
        return 0;
    }
}

time=O(n)+O(n)=O(2n)
space=O(n)

class Solution {
    public int missingNumber(int[] nums) {
        int n=nums.length;
        int nsum=n*(n+1)/2;
        int sum=0;
        for(int i=0;i<nums.length;i++)
        {
            sum+=nums[i];
        }
        return nsum-sum;
    }
}

time=O(n)
space=O(1)
