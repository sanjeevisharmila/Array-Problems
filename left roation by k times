class Solution {
    public void rotateArray(int[] nums, int k) {
        int n=nums.length;
        k=k%n;
        int[] temp=new int[k];
        
        for(int i=0;i<k;i++)
        {
            temp[i]=nums[i];
        }
        for(int i=k;i<n;i++)
        {
            temp[i-k]=nums[i];
        }
        int j=0;
        for(int i=n-k;i<n;i++)
        {
            nums[i]=temp[j];
            j++
        }
    }
}
time=o(k)+O(n-k)+O(k)=O(n+k)
space=O(k)

public class Main {

   
    public static void leftRotate(int[] arr, int k) 
    {
      
       k%=arr.length;
        reverseArray(arr, 0, k - 1);
        reverseArray(arr, k, arr.length - 1);
        reverseArray(arr, 0, arr.length - 1);
        
    }
    public static void reverseArray(int[] arr, int start, int end) {
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
}

time=O(k)+O(n-k)+O(n)=O(2n)
space=O(1)
