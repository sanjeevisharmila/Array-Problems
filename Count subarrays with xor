class Solution {
    public long subarrayXor(int arr[], int k) {
        int n=arr.length;
        int count=0;
        for(int i=0;i<n;i++)
        {
            int xor=0;
            for(int j=i;j<n;j++)
            {
                xor=xor^arr[j];
                    if(xor==k)
                    {
                        count++;
                    }
            }
        }
        return count;
    }
}
time=O(n*n)
space=O(1)

class Solution {
    public long subarrayXor(int arr[], int k) {
        int n=arr.length;
        int count=0;
        Map<Integer,Integer>mp=new HashMap<>();
        int xor=0;
        for(int i=0;i<n;i++)
        {
            xor=xor^arr[i];
            if(xor==k)
            count++;
            int ans=xor^k;
            if(mp.containsKey(ans))
            {
                count+=mp.get(ans);
            }
            mp.put(xor,mp.getOrDefault(xor,0)+1);
        }
           
        return count;
    }
}
time=O(n)
space=O(1)
