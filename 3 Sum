class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>>ans=new ArrayList<>();
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                for(int k=j+1;k<n;k++)
                {
                   int sum=nums[i]+nums[j]+nums[k];
                    if(sum==0)
                    {
                        List<Integer>temp=Arrays.asList(nums[i],nums[j],nums[k]);
                        Collections.sort(temp);
                        if(!ans.contains(temp))
                        {
                            ans.add(temp);
                        }
                    }
                }
            }
        }
        return ans;
    }
}

time=O(n*n*n)*O(no of triplets)
space=2*O(no of triplets)

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>>ans=new ArrayList<>();
        int n=nums.length;
        for(int i=0;i<n-1;i++)
        {
            Set<Integer>st=new HashSet<>();
            for(int j=i+1;j<n;j++)
            {
                int third=-(nums[i]+nums[j]);
                if(st.contains(third))
                {
                    List<Integer>temp=Arrays.asList(nums[i],nums[j],third);
                    Collections.sort(temp);
                    if(!ans.contains(temp))
                    {
                        ans.add(temp);
                    }
                }
                    st.add(nums[j]);
            
            }
        }
        return ans;
    }
}
time=O(n*n)*O(no of triplets)
space=O(n)+2*O(no of triplets)
